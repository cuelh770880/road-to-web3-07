{"ast":null,"code":"/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n  if (depth == null) {\n    depth = 1;\n  }\n\n  const result = [];\n  const forEach = result.forEach;\n\n  const flatDeep = function (arr, depth) {\n    forEach.call(arr, function (val) {\n      if (depth > 0 && Array.isArray(val)) {\n        flatDeep(val, depth - 1);\n      } else {\n        result.push(val);\n      }\n    });\n  };\n\n  flatDeep(array, depth);\n  return result;\n}\n\nfunction fromEntries(array) {\n  const result = {};\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    result[value[0]] = value[1];\n  }\n\n  return result;\n}\n\nexport function decode_arithmetic(bytes) {\n  let pos = 0;\n\n  function u16() {\n    return bytes[pos++] << 8 | bytes[pos++];\n  } // decode the frequency table\n\n\n  let symbol_count = u16();\n  let total = 1;\n  let acc = [0, 1]; // first symbol has frequency 1\n\n  for (let i = 1; i < symbol_count; i++) {\n    acc.push(total += u16());\n  } // skip the sized-payload that the last 3 symbols index into\n\n\n  let skip = u16();\n  let pos_payload = pos;\n  pos += skip;\n  let read_width = 0;\n  let read_buffer = 0;\n\n  function read_bit() {\n    if (read_width == 0) {\n      // this will read beyond end of buffer\n      // but (undefined|0) => zero pad\n      read_buffer = read_buffer << 8 | bytes[pos++];\n      read_width = 8;\n    }\n\n    return read_buffer >> --read_width & 1;\n  }\n\n  const N = 31;\n  const FULL = Math.pow(2, N);\n  const HALF = FULL >>> 1;\n  const QRTR = HALF >> 1;\n  const MASK = FULL - 1; // fill register\n\n  let register = 0;\n\n  for (let i = 0; i < N; i++) register = register << 1 | read_bit();\n\n  let symbols = [];\n  let low = 0;\n  let range = FULL; // treat like a float\n\n  while (true) {\n    let value = Math.floor(((register - low + 1) * total - 1) / range);\n    let start = 0;\n    let end = symbol_count;\n\n    while (end - start > 1) {\n      // binary search\n      let mid = start + end >>> 1;\n\n      if (value < acc[mid]) {\n        end = mid;\n      } else {\n        start = mid;\n      }\n    }\n\n    if (start == 0) break; // first symbol is end mark\n\n    symbols.push(start);\n    let a = low + Math.floor(range * acc[start] / total);\n    let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n\n    while (((a ^ b) & HALF) == 0) {\n      register = register << 1 & MASK | read_bit();\n      a = a << 1 & MASK;\n      b = b << 1 & MASK | 1;\n    }\n\n    while (a & ~b & QRTR) {\n      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n      a = a << 1 ^ HALF;\n      b = (b ^ HALF) << 1 | HALF | 1;\n    }\n\n    low = a;\n    range = 1 + b - a;\n  }\n\n  let offset = symbol_count - 4;\n  return symbols.map(x => {\n    switch (x - offset) {\n      case 3:\n        return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n\n      case 2:\n        return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n\n      case 1:\n        return offset + bytes[pos_payload++];\n\n      default:\n        return x - 1;\n    }\n  });\n} // returns an iterator which returns the next symbol\n\nexport function read_payload(v) {\n  let pos = 0;\n  return () => v[pos++];\n}\nexport function read_compressed_payload(bytes) {\n  return read_payload(decode_arithmetic(bytes));\n} // eg. [0,1,2,3...] => [0,-1,1,-2,...]\n\nexport function signed(i) {\n  return i & 1 ? ~i >> 1 : i >> 1;\n}\n\nfunction read_counts(n, next) {\n  let v = Array(n);\n\n  for (let i = 0; i < n; i++) v[i] = 1 + next();\n\n  return v;\n}\n\nfunction read_ascending(n, next) {\n  let v = Array(n);\n\n  for (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\n  return v;\n}\n\nfunction read_deltas(n, next) {\n  let v = Array(n);\n\n  for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\n  return v;\n}\n\nexport function read_member_array(next, lookup) {\n  let v = read_ascending(next(), next);\n  let n = next();\n  let vX = read_ascending(n, next);\n  let vN = read_counts(n, next);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < vN[i]; j++) {\n      v.push(vX[i] + j);\n    }\n  }\n\n  return lookup ? v.map(x => lookup[x]) : v;\n} // returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\n\nexport function read_mapped_map(next) {\n  let ret = [];\n\n  while (true) {\n    let w = next();\n    if (w == 0) break;\n    ret.push(read_linear_table(w, next));\n  }\n\n  while (true) {\n    let w = next() - 1;\n    if (w < 0) break;\n    ret.push(read_replacement_table(w, next));\n  }\n\n  return fromEntries(flat(ret));\n}\nexport function read_zero_terminated_array(next) {\n  let v = [];\n\n  while (true) {\n    let i = next();\n    if (i == 0) break;\n    v.push(i);\n  }\n\n  return v;\n}\n\nfunction read_transposed(n, w, next) {\n  let m = Array(n).fill(undefined).map(() => []);\n\n  for (let i = 0; i < w; i++) {\n    read_deltas(n, next).forEach((x, j) => m[j].push(x));\n  }\n\n  return m;\n}\n\nfunction read_linear_table(w, next) {\n  let dx = 1 + next();\n  let dy = next();\n  let vN = read_zero_terminated_array(next);\n  let m = read_transposed(vN.length, 1 + w, next);\n  return flat(m.map((v, i) => {\n    const x = v[0],\n          ys = v.slice(1); //let [x, ...ys] = v;\n    //return Array(vN[i]).fill().map((_, j) => {\n\n    return Array(vN[i]).fill(undefined).map((_, j) => {\n      let j_dy = j * dy;\n      return [x + j * dx, ys.map(y => y + j_dy)];\n    });\n  }));\n}\n\nfunction read_replacement_table(w, next) {\n  let n = 1 + next();\n  let m = read_transposed(n, 1 + w, next);\n  return m.map(v => [v[0], v.slice(1)]);\n}\n\nexport function read_emoji_trie(next) {\n  let sorted = read_member_array(next).sort((a, b) => a - b);\n  return read();\n\n  function read() {\n    let branches = [];\n\n    while (true) {\n      let keys = read_member_array(next, sorted);\n      if (keys.length == 0) break;\n      branches.push({\n        set: new Set(keys),\n        node: read()\n      });\n    }\n\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n\n    let temp = next();\n    let valid = temp % 3;\n    temp = temp / 3 | 0;\n    let fe0f = !!(temp & 1);\n    temp >>= 1;\n    let save = temp == 1;\n    let check = temp == 2;\n    return {\n      branches,\n      valid,\n      fe0f,\n      save,\n      check\n    };\n  }\n}","map":{"version":3,"mappings":"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","names":["flat","array","depth","result","forEach","flatDeep","arr","call","val","Array","isArray","push","fromEntries","i","length","value","decode_arithmetic","bytes","pos","u16","symbol_count","total","acc","skip","pos_payload","read_width","read_buffer","read_bit","N","FULL","Math","HALF","QRTR","MASK","register","symbols","low","range","floor","start","end","mid","a","b","offset","map","x","read_payload","v","read_compressed_payload","signed","read_counts","n","next","read_ascending","read_deltas","read_member_array","lookup","vX","vN","j","read_mapped_map","ret","w","read_linear_table","read_replacement_table","read_zero_terminated_array","read_transposed","m","fill","undefined","dx","dy","ys","slice","_","j_dy","y","read_emoji_trie","sorted","sort","read","branches","keys","set","Set","node","size","temp","valid","fe0f","save","check"],"sources":["C:\\Users\\zerozhang\\RTW3-Week7-NFT-Marketplace\\node_modules\\@ethersproject\\hash\\src.ts\\ens-normalize\\decoder.ts"],"sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nexport type Numbers = Uint8Array | Array<number>;\nexport type NextFunc = (...args: Array<any>) => number;\n\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array: Array<any>, depth?: number): Array<any> {\n    if (depth == null) { depth = 1; }\n    const result: Array<any> = [];\n\n    const forEach = result.forEach;\n\n    const flatDeep = function (arr: Array<any>, depth: number) {\n        forEach.call(arr, function (val: any) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            } else {\n               result.push(val);\n            }\n        });\n    };\n\n    flatDeep(array, depth);\n    return result;\n}\n\nfunction fromEntries<T extends string | number | symbol = string | number | symbol, U = any>(array: Array<[T, U]>): Record<T, U> {\n    const result: Record<T, U> = <Record<T, U>>{ };\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\n\nexport function decode_arithmetic(bytes: Numbers): Array<number> {\n\tlet pos = 0;\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n\t\n\t// decode the frequency table\n\tlet symbol_count = u16();\n\tlet total = 1;\n\tlet acc = [0, 1]; // first symbol has frequency 1\n\tfor (let i = 1; i < symbol_count; i++) {\n\t\tacc.push(total += u16());\n\t}\n\n\t// skip the sized-payload that the last 3 symbols index into\n\tlet skip = u16();\n\tlet pos_payload = pos;\n\tpos += skip;\n\n\tlet read_width = 0;\n\tlet read_buffer = 0; \n\tfunction read_bit() {\n\t\tif (read_width == 0) {\n\t\t\t// this will read beyond end of buffer\n\t\t\t// but (undefined|0) => zero pad\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\n\t\t\tread_width = 8;\n\t\t}\n\t\treturn (read_buffer >> --read_width) & 1;\n\t}\n\n\tconst N = 31;\n\tconst FULL = 2**N;\n\tconst HALF = FULL >>> 1;\n\tconst QRTR = HALF >> 1;\n\tconst MASK = FULL - 1;\n\n\t// fill register\n\tlet register = 0;\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\n\n\tlet symbols = [];\n\tlet low = 0;\n\tlet range = FULL; // treat like a float\n\twhile (true) {\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\n\t\tlet start = 0;\n\t\tlet end = symbol_count;\n\t\twhile (end - start > 1) { // binary search\n\t\t\tlet mid = (start + end) >>> 1;\n\t\t\tif (value < acc[mid]) {\n\t\t\t\tend = mid;\n\t\t\t} else {\n\t\t\t\tstart = mid;\n\t\t\t}\n\t\t}\n\t\tif (start == 0) break; // first symbol is end mark\n\t\tsymbols.push(start);\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1\n\t\twhile (((a ^ b) & HALF) == 0) {\n\t\t\tregister = (register << 1) & MASK | read_bit();\n\t\t\ta = (a << 1) & MASK;\n\t\t\tb = (b << 1) & MASK | 1;\n\t\t}\n\t\twhile (a & ~b & QRTR) {\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n\t\t\ta = (a << 1) ^ HALF;\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\n\t\t}\n\t\tlow = a;\n\t\trange = 1 + b - a;\n\t}\n\tlet offset = symbol_count - 4;\n\treturn symbols.map(x => { // index into payload\n\t\tswitch (x - offset) {\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 1: return offset + bytes[pos_payload++];\n\t\t\tdefault: return x - 1;\n\t\t}\n\t});\n}\t\n\n\n// returns an iterator which returns the next symbol\nexport function read_payload(v: Numbers): NextFunc {\n\tlet pos = 0;\n\treturn () => v[pos++];\n}\nexport function read_compressed_payload(bytes: Numbers): NextFunc {\n\treturn read_payload(decode_arithmetic(bytes));\n}\n\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i: number): number { \n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\n}\n\nfunction read_counts(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0; i < n; i++) v[i] = 1 + next();\n\treturn v;\n}\n\nfunction read_ascending(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\treturn v;\n}\n\nfunction read_deltas(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\treturn v;\n}\n\nexport function read_member_array(next: NextFunc, lookup?: Record<number, number>) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next: NextFunc): Record<number, Array<number>> {\n\tlet ret = [];\n\twhile (true) {\n\t\tlet w = next();\n\t\tif (w == 0) break;\n\t\tret.push(read_linear_table(w, next));\n\t}\n\twhile (true) {\n\t\tlet w = next() - 1;\n\t\tif (w < 0) break;\n\t\tret.push(read_replacement_table(w, next));\n\t}\n\treturn fromEntries<number, Array<number>>(flat(ret));\n}\n\nexport function read_zero_terminated_array(next: NextFunc): Array<number> {\n\tlet v = [];\n\twhile (true) {\n\t\tlet i = next();\n\t\tif (i == 0) break;\n\t\tv.push(i);\n\t}\n\treturn v;\n}\n\nfunction read_transposed(n: number, w: number, next: NextFunc): Array<Array<number>> {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\n\n\nfunction read_linear_table(w: number, next: NextFunc): Array<Array<number | Array<number>>> {\n\tlet dx = 1 + next();\n\tlet dy = next();\n\tlet vN = read_zero_terminated_array(next);\n\tlet m = read_transposed(vN.length, 1+w, next);\n\treturn flat(m.map((v, i) => {\n\t  const x = v[0], ys = v.slice(1);\n\t\t//let [x, ...ys] = v;\n\t\t//return Array(vN[i]).fill().map((_, j) => {\n\t\treturn Array(vN[i]).fill(undefined).map((_, j) => {\n\t\t\tlet j_dy = j * dy;\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\n\t\t});\n\t}));\n}\n\nfunction read_replacement_table(w: number, next: NextFunc): Array<[ number, Array<number> ]> {\n\tlet n = 1 + next();\n\tlet m = read_transposed(n, 1+w, next);\n\treturn m.map(v => [v[0], v.slice(1)]);\n}\n\nexport type Branch = {\n    set: Set<number>;\n    node: Node;\n};\n\nexport type Node = {\n    branches: Array<Branch>;\n    valid: number;\n    fe0f: boolean;\n    save: boolean;\n    check: boolean;\n};\n\nexport function read_emoji_trie(next: NextFunc): Node {\n\tlet sorted = read_member_array(next).sort((a, b) => a - b);\n\treturn read();\n\tfunction read(): Node {\n\t\tlet branches = [];\n\t\twhile (true) {\n\t\t\tlet keys = read_member_array(next, sorted);\n\t\t\tif (keys.length == 0) break;\n\t\t\tbranches.push({set: new Set(keys), node: read()});\n\t\t}\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n \t\tlet temp = next();\n \t\tlet valid = temp % 3;\n \t\ttemp = (temp / 3)|0;\n \t\tlet fe0f = !!(temp & 1);\n \t\ttemp >>= 1;\n \t\tlet save = temp == 1;\n \t\tlet check = temp == 2;\n \t\treturn {branches, valid, fe0f, save, check};\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}