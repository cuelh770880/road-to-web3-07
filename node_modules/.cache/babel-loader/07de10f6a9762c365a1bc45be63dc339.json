{"ast":null,"code":"import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { ens_normalize } from \"./ens-normalize/lib\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp) {\n  if (comp.length === 0) {\n    throw new Error(\"invalid ENS name; empty component\");\n  }\n\n  return comp;\n}\n\nfunction ensNameSplit(name) {\n  const bytes = toUtf8Bytes(ens_normalize(name));\n  const comps = [];\n\n  if (name.length === 0) {\n    return comps;\n  }\n\n  let last = 0;\n\n  for (let i = 0; i < bytes.length; i++) {\n    const d = bytes[i]; // A separator (i.e. \".\"); copy this component\n\n    if (d === 0x2e) {\n      comps.push(checkComponent(bytes.slice(last, i)));\n      last = i + 1;\n    }\n  } // There was a stray separator at the end of the name\n\n\n  if (last >= bytes.length) {\n    throw new Error(\"invalid ENS name; empty component\");\n  }\n\n  comps.push(checkComponent(bytes.slice(last)));\n  return comps;\n}\n\nexport function ensNormalize(name) {\n  return ensNameSplit(name).map(comp => toUtf8String(comp)).join(\".\");\n}\nexport function isValidName(name) {\n  try {\n    return ensNameSplit(name).length !== 0;\n  } catch (error) {}\n\n  return false;\n}\nexport function namehash(name) {\n  /* istanbul ignore if */\n  if (typeof name !== \"string\") {\n    logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n  }\n\n  let result = Zeros;\n  const comps = ensNameSplit(name);\n\n  while (comps.length) {\n    result = keccak256(concat([result, keccak256(comps.pop())]));\n  }\n\n  return hexlify(result);\n}\nexport function dnsEncode(name) {\n  return hexlify(concat(ensNameSplit(name).map(comp => {\n    // DNS does not allow components over 63 bytes in length\n    if (comp.length > 63) {\n      throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n    }\n\n    const bytes = new Uint8Array(comp.length + 1);\n    bytes.set(comp, 1);\n    bytes[0] = bytes.length - 1;\n    return bytes;\n  }))) + \"00\";\n}","map":{"version":3,"mappings":"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","names":["concat","hexlify","toUtf8Bytes","toUtf8String","keccak256","Logger","version","logger","ens_normalize","Zeros","Uint8Array","fill","checkComponent","comp","length","Error","ensNameSplit","name","bytes","comps","last","i","d","push","slice","ensNormalize","map","join","isValidName","error","namehash","throwArgumentError","result","pop","dnsEncode","set"],"sources":["C:\\Users\\zerozhang\\RTW3-Week7-NFT-Marketplace\\node_modules\\@ethersproject\\hash\\src.ts\\namehash.ts"],"sourcesContent":["import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { ens_normalize } from \"./ens-normalize/lib\";\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp: Uint8Array): Uint8Array {\n    if (comp.length === 0) { throw new Error(\"invalid ENS name; empty component\"); }\n    return comp;\n}\n\nfunction ensNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ens_normalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) { throw new Error(\"invalid ENS name; empty component\"); }\n\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n\nexport function ensNormalize(name: string): string {\n    return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(\".\");\n}\n\nexport function isValidName(name: string): boolean {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    } catch (error) { }\n    return false;\n}\n\nexport function namehash(name: string): string {\n    /* istanbul ignore if */\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n\n    let result: string | Uint8Array = Zeros;\n\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n\n    return hexlify(result);\n}\n\nexport function dnsEncode(name: string): string {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n\n    }))) + \"00\";\n}\n"]},"metadata":{},"sourceType":"module"}